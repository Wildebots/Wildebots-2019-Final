// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4902.Wildebots2019NEW;

import org.usfirst.frc4902.Wildebots2019NEW.commands.*;

//import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;



/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButtonA; // Button # 1
    public JoystickButton joystickButtonY; // Button # 4

    public JoystickButton joystickButtonX; // Button # 3
    public JoystickButton joystickButtonB; // Button # 2

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public XboxController my_Xbox360Controller;

    public OI() {
        my_Xbox360Controller = new XboxController(0); // Get a new Xbox 360 Controller on Channel 0
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystickButtonY = new JoystickButton(my_Xbox360Controller, 4);
        joystickButtonY.whileHeld(new RaiseGripper()); // Call RaiseGripper command when the JoyStick Button Y (4) is Held.
        joystickButtonA = new JoystickButton(my_Xbox360Controller, 1);
        joystickButtonA.whileHeld(new LowerGripper()); // Call RaiseGripper command when the JoyStick Button A (1) is Held.

        joystickButtonX = new JoystickButton(my_Xbox360Controller, 3);
        joystickButtonX.whileHeld(new BallCollect_DropOff(1.0)); // Call BallCollect_DropOff command when the JoyStick Button X (3) is Held.
        joystickButtonB = new JoystickButton(my_Xbox360Controller, 2);
        joystickButtonB.whileHeld(new BallCollect_DropOff(-1.0)); // Call BallCollect_DropOff command when the JoyStick Button B (2) is Held.


        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new Autonomous());
        SmartDashboard.putData("Arcade Drive", new ArcadeDrive());
        SmartDashboard.putData("Ball Collect_DropOff", new BallCollect_DropOff());
        SmartDashboard.putData("Lower Gripper", new LowerGripper());
        SmartDashboard.putData("Raise Gripper", new RaiseGripper());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public XboxController getmy_Xbox360Controller() {
        return my_Xbox360Controller;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

